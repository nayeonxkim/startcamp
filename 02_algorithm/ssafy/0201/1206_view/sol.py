'''
---
## 문제 추상화
# 건물을 배열로 나타낸다.
# 건물의 수 = 배열의 길이, 건물위치 = 인덱스, 건물별 세대의 수 = 해당 인덱스의 값
[0,0,3,5,2,4,9,0,6,4,0,6,0,0]

## 과정 1
# 조망권이 확보된 세대의 수를 배열로 나타낸다. : view 리스트
[0,0,0,1,0,0,3,0,0,0,0,2,0,0]

## 과정 2
# view 리스트 요소의 합을 구한다.
6
---
# 각 건물의 조망권이 확보된 세대의 수 구하기
0, 3, 5, 2, 4
왼쪽 두개 가장 차이가 적게 나는 값 = 2
오른쪽 두개 가장 차이가 적게 나는 값 = 1
-> 1 (해당 건물의 조망권 확보 세대 수)

2, 4, 9, 0, 6
왼쪽 두개 가장 차이가 적게 나는 값 = 5
오른쪽 두개 가장 차이가 적게 나는 값 = 3
-> 3
=> 높이가 가장 적게 차이 나는 값 = 조망권이 확보된 세대의 수
: 이 과정을 모든 건물에 대해 반복
---
##1. 건물별로 높이가 가장 적게 차이 나는 값 구하기
# 2번 인덱스부터 N-3인덱스까지의 건물
# 좌우로 2개씩의 값과 차이를 구해서
# 하나라도 0보다 작은 경우가 있으면 세대 = 0이 되고
# 양수인 경우엔 세대 = 높이 값 차이 중 가장 작은 값이 된다.
# 여기까지 view 리스트

##2. 전체 조망권 확보 세대 수 구하기
# view 리스트 요소를 순회하며 합을 구함.
'''

import sys
sys.stdin = open('input.txt')

# 테스트케이스 10개에 대해, 건물 수와 건물 높이를 입력받음
for T in range(1, 11):
    N = int(input())
    heights = list(map(int, input().split()))

    ##1. 건물별로 조망권이 확보된 세대의 수 구하기
    # 조망권이 확보된 세대의 수를 할당할 리스트 view를 건물의 수만큼 생성한다.
    view = [0] * N

    # 2번째 건물부터 N-3번째 건물까지 순회하며 (건물이 8개라면 앞뒤로 건물 두개를 건너뛰고 idx2~idx5 확인)
    for i in range(2, N-2):

        # 해당 건물 양옆 두 개씩과의 높이 차이를 계산한다.
        # 가장 적게 차이 나는 값을 구해야하므로 모든 높이 차이를 넣을 리스트를 생성한다.
        difference_list = []

        # i를 기준으로 두 칸씩, i-2, i-1, i+1, i+2와의 차이 값을 계산한다.
        for j in range(-2, 3):
            # j가 0일 때는 i 자기자신이므로 계산하지 않는다.
            if j == 0:
                continue
            difference = heights[i] - heights[i+j]

            # 만약 차이가 음수라면 0을 할당한다. : 옆 건물이 나보다 높다면 조망권 X
            if difference < 0:
                difference = 0

            ### i보다 높은 건물이 있으면 break해서 반복문 종료하는 방법


           # 높이차이 값을 리스트에 넣는다.
            difference_list.append(difference)

        # 높이 차이 리스트에서 가장 작은 값을 구하여
        minD = difference_list[0]
        for d in difference_list:
            if minD > d:
                minD = d

        # 해당 건물 순서와 일치하는 view 리스트위치에 넣는다.
        view[i] = minD

    ##2. 전체 조망권 확보 세대 수 구하기
    # 건물별 조망권 확보 세대의 수를 모두 더하여 출력한다.
    ans = 0
    for i in view:
        ans += i
    print(f'#{T} {ans}')






