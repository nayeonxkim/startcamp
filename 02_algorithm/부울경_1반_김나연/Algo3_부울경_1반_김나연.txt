1) 먼저, 소괄호 짝을 검사할 stack을 생성한다.
문자열을 순회하면서, 문자가 (인 경우 스택에 push하고 )인 경우, 조건문을 실행한다.
조건문은 다음과 같이 작성한다. stack에 값이 있고, stack의 top이 (인 경우 stack을 pop한다.
만약 이때 스택이 비어있는 경우에는 소괄호 짝이 맞지 않는 경우이기 때문에, 비정상을 의미하는 False를 반환한다.

또한 반복문을 모두 마친 후에 stack에 값이 남아 있다면, 이또한 소괄호 짝이 맞지 않은 경우이므로 비정상을 반환한다.
반복문 실행을 모두 마친 후에 스택이 비어있다면 소괄호 짝이 맞는 경우이기 때문에 True를 반환한다.
이를 코드로 작성하면 다음과 같다.
```
word = 'if((i==0)&&(j==0)))'

def check(word):
    stack = []
    for char in word:
        if char == '(':
            stack.append(char)
        elif char == ')':
            if stack and stack[-1] == '(':
                stack.pop()
            else:
                return False

    if stack:
        return False
    else:
        return True

print(check(word))
```

2) ( ( ) ( ) ) )
[(]       # 여는 괄호를 만나 push
[(, (]    # 여는 괄호를 만나 push
[(]       # 닫는 괄호를 만나 pop
[(, (]    # 여는 괄호를 만나 push
[(]       # 닫는 괄호를 만나 pop
[]        # 닫는 괄호를 만나 pop
[]        # 닫는 괄호를 만났는데 스택이 비어 pop할 값이 없음 -> 괄호 상태는 오류인 것으로 판명

마지막 닫는 괄호를 만났을 때, 이미 stack이 비어있어 pop할 수 없다.
여는 괄호보다 닫는 괄호 개수가 더 많은 경우다. 따라서 괄호상태는 오류다.


